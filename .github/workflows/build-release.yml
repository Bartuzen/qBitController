name: Build Release

on:
  push:
    tags:
      - v*.*.*

permissions:
  contents: write

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Extract version
        id: set-version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

  build:
    needs: extract-version
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.extract-version.outputs.version }}
      sign-android: true
      disable-cache: true
    secrets:
      store-file-base64: ${{ secrets.QBITCONTROLLER_STORE_FILE_BASE64 }}
      store-password: ${{ secrets.QBITCONTROLLER_STORE_PASSWORD }}
      key-alias: ${{ secrets.QBITCONTROLLER_KEY_ALIAS }}
      key-password: ${{ secrets.QBITCONTROLLER_KEY_PASSWORD }}

  upload-release:
    needs:
      - extract-version
      - build
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true

      - name: Remove Play Store version
        run: rm qbitcontroller-${{ needs.extract-version.outputs.version }}-android-playstore.aab

      - name: Extract release body from tag message
        id: changelog
        run: |
          TAG_NAME=${{ github.ref_name }}
          TAG_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG_NAME" | \
            jq -r '.object.sha')
          
          BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/tags/$TAG_SHA" | \
            jq -r '.message' | tail -n +2)
          
          BODY_CLEAN=$(echo "$BODY" | sed '/^-----BEGIN PGP SIGNATURE-----$/,/^-----END PGP SIGNATURE-----$/d')
          
          {
            echo "body<<EOF"
            echo "$BODY_CLEAN"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: qBitController ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.body }}
          files: qbitcontroller-${{ needs.extract-version.outputs.version }}-*.*

  build-playstore:
    needs: extract-version
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: Create google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_BASE64 }}" | base64 --decode > composeApp/google-services.json

      - name: Build project
        run: ./gradlew bundleFirebaseRelease
        env:
          QBITCONTROLLER_SIGN_RELEASE: true
          QBITCONTROLLER_STORE_FILE_BASE64: ${{ secrets.QBITCONTROLLER_STORE_FILE_BASE64 }}
          QBITCONTROLLER_STORE_PASSWORD: ${{ secrets.QBITCONTROLLER_STORE_PASSWORD }}
          QBITCONTROLLER_KEY_ALIAS: ${{ secrets.QBITCONTROLLER_KEY_ALIAS }}
          QBITCONTROLLER_KEY_PASSWORD: ${{ secrets.QBITCONTROLLER_KEY_PASSWORD }}

      - name: Rename & move artifact
        run: mv composeApp/build/outputs/bundle/firebaseRelease/composeApp-firebase-release.aab "qbitcontroller-${{ needs.extract-version.outputs.version }}-android-playstore.aab"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-playstore
          path: "qbitcontroller-${{ needs.extract-version.outputs.version }}-android-playstore.aab"

  upload-playstore:
    needs:
      - extract-version
      - build-playstore
      - upload-release
    runs-on: ubuntu-latest
    steps:
      - name: Download Play Store artifact
        uses: actions/download-artifact@v5
        with:
          name: android-playstore

      - name: Upload to Play Store
        run: |
          fastlane supply \
            --aab qbitcontroller-${{ needs.extract-version.outputs.version }}-android-playstore.aab \
            --package_name dev.bartuzen.qbitcontroller \
            --skip_upload_metadata true \
            --skip_upload_images true \
            --skip_upload_screenshots true
        env:
          SUPPLY_JSON_KEY_DATA: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}

  upload-altstore:
    needs:
      - upload-release
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install requirements
        run: pip install -r .github/update_altstore_source.requirements.txt

      - name: Update AltStore source
        run: |
          python .github/update_altstore_source.py \
            --altstore-repo "${{ vars.ALTSTORE_REPO }}" \
            --release-id "${{ needs.upload-release.outputs.release-id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALTSTORE_GITHUB_TOKEN: ${{ secrets.ALTSTORE_GITHUB_TOKEN }}
